/*
    Time Complexity: O(N)
    Space Complexity: O(1)

    Where N is length of the string.
*/

import java.util.Stack;

public class Solution 
{
    public static String smallestSubsequence(int n, String s) 
    {
        // Array to stores the last occurrence of each character if it has occurred otherwise -1.
        int[] lastIdx = new int[26];
        boolean[] vis = new boolean[26];

        for (int i = 0; i < 26; i++) 
        {
            lastIdx[i] = -1;
        }

        for (int i = 0; i < s.length(); i++) 
        {
            lastIdx[s.charAt(i) - 'a'] = i;
        }

        // Stack to keep the characters for the result.
        Stack <Character> w = new Stack <Character>();

        for (int i = 0; i < n; i++) 
        {
            // Check if not visited.
            if (vis[s.charAt(i) - 'a'] == false) 
            {

                while (w.isEmpty() == false) 
                {
                    if (w.peek() > s.charAt(i) && lastIdx[w.peek() - 'a'] > i) 
                    {
                        // Marks as unvisited.
                        vis[w.peek() - 'a'] = false;

                        // Remove from the stack.
                        w.pop();
                    } 
                    else 
                    {
                        break;
                    }
                }

                // Push the current character in the stack.
                w.push(s.charAt(i));

                // Marks as visited.
                vis[s.charAt(i) - 'a'] = true;
            }
        }

        String ans = new String();

        // Build final sequence.
        while (!w.empty()) 
        {
            char c = w.peek();
            w.pop();
            ans = c + ans;
        }

        return ans;
    }
}
