/*
  	Time Complexity: O(L)
  	Space Complexity: O(L)
  
    Where 'L' is the total number of functions.
*/

import java.util.Stack;

public class Solution {

	public static int[] processTime(int[][] logs, int n, int l) {
		
		// Create a stack to push processes.
		Stack<Integer> stack = new Stack<>();
		
		// Array to store exclusive time of each process.
		int[] ans = new int[n];

		stack.push(logs[0][0]);

		int i = 1;
		int prev = logs[2][0];

		while (i < l) {

			// If any process starts. 
			if (logs[1][i] == 1) {
				
				// Update the time of previous executing process.
				if (!stack.isEmpty()) {
					ans[stack.peek()] += logs[2][i] - prev;
				}
				
				// Push the function into the stack.
				stack.push(logs[0][i]);
				prev = logs[2][i];
			} 
			
			// If it terminates.
			else {

				// Remove it from stack, and update the time taken.
				ans[stack.peek()] += logs[2][i] - prev + 1;
				stack.pop();
				prev = logs[2][i] + 1;
			}
			
			i++;
		}
		
		return ans;
	}
}
