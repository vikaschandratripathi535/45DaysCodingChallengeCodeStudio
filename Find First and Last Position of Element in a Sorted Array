/*
		Time Completargetity: O(log N)
		Space Completargetity: O(1)

		where N is the size of the sorted array.
*/

public class Solution {
    public static int[] searchRange(int []arr, int x) {
        int n = arr.length;
        // Initialise both first and last occurences to -1, incase x is not found in array.
        int idx1 = -1, idx2 = -1;
        // Binary search to find the first position of occurence of x.
        int lo = 0, hi = n - 1;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            // If arr[mid] == x and x > arr[mid-1], then mid is first occurrence of x, or arr[mid] == x and mid == 0, then mid is first occurrence of x.
            if ((mid == 0 || x > arr[mid - 1]) && arr[mid] == x) {
                idx1 = mid;
                break;
            }

            // If x is greater than arr[mid] in sorted array, then x may only occur in [mid+1, hi] range of index.
            else if (x > arr[mid]) {
                lo = mid + 1;
            }

            // Else x may only occur in [lo, mid-1] range of index.
            else {
                hi = mid - 1;
            }

        }

        // Binary search to find the last position of occurence of x.
        lo = 0;
        hi = n - 1;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            // If arr[mid] == x and mid == N-1 then, mid is last occurrence of x, or arr[mid+1] > x and arr[mid] == x, then mid is last occurence of x.
            if ((mid == n - 1 || x < arr[mid + 1]) && arr[mid] == x) {
                idx2 = mid;
                break;
            }

            // If x < arr[mid], then x may only occur in [lo, mid-1] range of index.
            else if (x < arr[mid]) {
                hi = mid - 1;
            }

            // Else x may only occur in [mid+1, hi] range of index.
            else {
                lo = mid + 1;
            }

        }

        int []sol = new int[2];
        sol[0] = idx1;
        sol[1] = idx2;
        return sol;
    }
}
