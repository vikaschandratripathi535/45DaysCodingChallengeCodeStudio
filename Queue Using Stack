/*
    Time complexity: O(N * T)
        For enQueue(): O(1) 
        For deQueue(): O(N) 
        For peek(): O(N)
        For isEmpty(): O(1)

    Space Complexity : O(N)

    Where 'N' is the maximum number of elements that are in the stack at any time.
    Where 'T' is the total number of queries which are performed.
*/

import java.util.Stack;

public class Queue {

	// Only one user stack is used.   
	Stack<Integer> st;

	Queue() {
		st = new Stack<Integer>(); 
	}

	// EnQueue item to the queue.
	void enQueue(int val) {
		st.push(val);
	}

	// Dequeue an item from the queue.
	int deQueue() {
		// If stack is empty, return -1.
		if (st.isEmpty()) {
			return -1;
		}

		// Pop the current top element.
		int x = st.peek();
		st.pop(); 

		// Base case of the recursion.   
		if (st.isEmpty()) {
			return x; 
		}

		// Recursively pop the next element.      
		int nxt = deQueue(); 
		// Push this element again to the stack.
		st.push(x); 
		return nxt;

	}

	// Returns the Front element of the queue.
	int peek() {
		if (st.isEmpty()) {
			return -1;
		}

		int x = st.peek();
		st.pop();
		if (st.isEmpty()) {
			st.push(x);
			return x;
		}

		int nxt = peek();
		st.push(x);
		return nxt;
	}

	// Whether the queue is empty or not.
	boolean isEmpty() {
		return (st.isEmpty());
	}
}
