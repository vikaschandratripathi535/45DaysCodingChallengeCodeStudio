/*
        Time Complexity: O(N)
        Space complexity: O(N)

        Where N is the length of the array.
*/

import java.util.Arrays;
import java.util.ArrayList;

public class Solution {
	public static int maxAbsSum(int[] arr, int n) {

		// For best permutation array.
		ArrayList<Integer> ans = new ArrayList<Integer>();

		Arrays.sort(arr);

		// Add number from both sides of array.
		for (int i = 0; i < n / 2; ++i) {
			ans.add(arr[i]);
			ans.add(arr[n - i - 1]);
		}

		// If n is odd then add the middle element.
		if (n % 2 != 0) {
			ans.add(arr[n / 2]);
		}

		int maxSum = 0;

		for (int i = 0; i < n - 1; ++i) {
			maxSum += Math.abs(ans.get(i) - ans.get(i + 1));
		}
		// For the difference between last and first element.
		maxSum += Math.abs(ans.get(n - 1) - ans.get(0));

		return maxSum;
	}

}


