/*
    Time Complexity: O(K * log(N))
    Space Complexity: O(1)
    
    Where K and N are the given amount of time and 
    number of bags respectively.
*/

import java.util.ArrayList;
import java.util.Collections;
import java.util.PriorityQueue;

public class Solution {
    public static int maximumChocolates(ArrayList<Integer> arr,int k) {

        // To take modulo.
        int MOD = 1000000007;
        int n = arr.size();

        // To store the final answer.
        int ans=0;

        /*
            Declaring a priority queue and storing all the
            elements in it.
        */
        PriorityQueue<Integer>pq= new PriorityQueue<>(Collections.reverseOrder());

        for(int i = 0; i < n; i++){
            pq.add(arr.get(i));
        }

        // To iterate over k.
        while(k-->0){

            // Taking the maximum element and adding it to the ans.
            int mx = pq.peek();
            pq.poll();
            ans = (ans + mx) % MOD;

            // Pushing mx/2 to the priority queue.
            pq.add(mx / 2);
        }

        return ans;
    }
}
