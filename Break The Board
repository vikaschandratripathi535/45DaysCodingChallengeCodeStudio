/*
	Time Complexity: O(max(L, W) * log(max(L, W)))
	Space Complexity: O(1),

	where L and W is the length and width of the board respectively.
*/

import java.util.ArrayList;
import java.util.Collections;

public class Solution 
{

	public static int minimumCost(ArrayList<Integer> rowCost, ArrayList<Integer> colCost, int l, int w) 
    {	
        // Sort the costs of row in decreasing order
		Collections.sort(rowCost, Collections.reverseOrder());
		
        // Sort the costs of column in decreasing order
		Collections.sort(colCost, Collections.reverseOrder());
		
        int cost = 0;
        int i = 0;
        int j = 0;
        int rowWidth = 1;
        int columnWidth = 1;
		
        while (i < l - 1 && j < w - 1) 
        {	
            if (rowCost.get(i) > colCost.get(j)) 
            {
				cost = cost + rowCost.get(i) * columnWidth;
				i++;
				rowWidth++;
			}
			else 
            {
				cost = cost + colCost.get(j) * rowWidth;
				j++;
				columnWidth++;
			}
		}

		int rowSum = 0;
		
        // Now running this loop if any row is left
		while (i < l - 1) 
        {
			rowSum = rowSum + rowCost.get(i++);
		}

		// Updating cost
		cost = cost + rowSum * columnWidth;
		int colSum = 0;
		
        // Now running this loop if any column is left
		while (j < w - 1) 
        {
			colSum = colSum + colCost.get(j++);
		}

		// Updating cost
		cost = cost + colSum * rowWidth;

		return cost;
	}

}
