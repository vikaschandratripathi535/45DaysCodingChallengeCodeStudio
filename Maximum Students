/*
    Time Complexity : O(M * (4 ^ N)).
    Space Complextiy : O(M * (2 ^ N)).

    Where 'M' is the number of rows,
    and 'N' is the number of columns.
*/

import java.util.ArrayList;
import java.util.Arrays;
import java.lang.Integer;

public class Solution {

	public static int maxStudents(ArrayList<ArrayList<Character>> seats) {
		int m = seats.size();
		int n = seats.get(0).size();
		ArrayList<Integer> validity = new ArrayList<Integer>();

		// Parsing the seats into masks.
		for (int i = 0; i < m; ++i) {
			int cur = 0;
			for (int j = 0; j < n; ++j) {
				if (seats.get(i).get(j) == '.') {
					cur = cur ^ (1 << j);
				}
			}
			validity.add(cur);
		}

		int[][] dp = new int[m + 1][1 << n];

		for (int[] curr : dp) {
			Arrays.fill(curr, -1);
		}

		dp[0][0] = 0;
		for (int i = 1; i <= m; ++i) {
			int valid = validity.get(i - 1);
			/*
			    Checking all possible combinations
			    of seating students at valid positions.
			*/
			for (int j = 0; j < (1 << n); ++j) {
				/*
				    1. (j & valid) == j: check if j is a subset of valid.
				    2. !(j & (j >> 1)): check if there is no adjancent students in the row.
				*/
				if ((j & valid) == j && (j & (j >> 1)) == 0) {
					for (int k = 0; k < (1 << n); ++k) {
						/*
						    !(j & (k >> 1)): no students in the upper left positions
						    !((j >> 1) & k): no students in the upper right positions
						    dp[i - 1][k] != -1: the previous state is valid
						*/
						if ((j & (k >> 1)) == 0 && ((j >> 1) & k) == 0 && dp[i - 1][k] != -1) {
							dp[i][j] = Math.max(dp[i][j], dp[i - 1][k] + Integer.bitCount(j));
						}
					}
				}
			}
		}

		// The answer is the maximum among all dp[m][mask].
		int ans = Integer.MIN_VALUE;
		for (int i = 0; i < (1 << n); i++) {
			ans = Math.max(ans, dp[m][i]);
		}
		return ans;
	}
}
